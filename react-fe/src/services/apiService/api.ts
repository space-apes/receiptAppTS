/* tslint:disable */
/* eslint-disable */
/**
 * ReceiptAppTS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiSessionsCreateGuestSessionPost200Response
 */
export interface ApiSessionsCreateGuestSessionPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiSessionsCreateGuestSessionPost200Response
     */
    'msg': string;
}
/**
 * 
 * @export
 * @interface ApiSessionsCreateGuestSessionPost400Response
 */
export interface ApiSessionsCreateGuestSessionPost400Response {
    /**
     * 
     * @type {string}
     * @memberof ApiSessionsCreateGuestSessionPost400Response
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof ApiSessionsCreateGuestSessionPost400Response
     */
    'msg': string;
}
/**
 * 
 * @export
 * @interface ApiSessionsCreateGuestSessionPostRequest
 */
export interface ApiSessionsCreateGuestSessionPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiSessionsCreateGuestSessionPostRequest
     */
    'displayedName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiSessionsCreateGuestSessionPostRequest
     */
    'roomName': string;
}
/**
 * 
 * @export
 * @interface ApiSessionsCreateRegisteredSessionPostRequest
 */
export interface ApiSessionsCreateRegisteredSessionPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiSessionsCreateRegisteredSessionPostRequest
     */
    'displayedName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiSessionsCreateRegisteredSessionPostRequest
     */
    'roomName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiSessionsCreateRegisteredSessionPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ApiSessionsCreateRegisteredSessionPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ApiTransactionsPost201Response
 */
export interface ApiTransactionsPost201Response {
    /**
     * 
     * @type {number}
     * @memberof ApiTransactionsPost201Response
     */
    'userId'?: number;
}
/**
 * 
 * @export
 * @interface ApiTransactionsPost400Response
 */
export interface ApiTransactionsPost400Response {
    /**
     * 
     * @type {string}
     * @memberof ApiTransactionsPost400Response
     */
    'path': string;
}
/**
 * 
 * @export
 * @interface ApiTransactionsPostRequest
 */
export interface ApiTransactionsPostRequest {
    /**
     * 
     * @type {number}
     * @memberof ApiTransactionsPostRequest
     */
    'initiatorUserId': number;
    /**
     * 
     * @type {string}
     * @memberof ApiTransactionsPostRequest
     */
    'businessName': string;
    /**
     * 
     * @type {Array<ApiTransactionsPostRequestReceiptItemsInner>}
     * @memberof ApiTransactionsPostRequest
     */
    'receiptItems': Array<ApiTransactionsPostRequestReceiptItemsInner>;
}
/**
 * 
 * @export
 * @interface ApiTransactionsPostRequestReceiptItemsInner
 */
export interface ApiTransactionsPostRequestReceiptItemsInner {
    /**
     * 
     * @type {number}
     * @memberof ApiTransactionsPostRequestReceiptItemsInner
     */
    'userId': number;
    /**
     * 
     * @type {string}
     * @memberof ApiTransactionsPostRequestReceiptItemsInner
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ApiTransactionsPostRequestReceiptItemsInner
     */
    'itemName': string;
    /**
     * 
     * @type {number}
     * @memberof ApiTransactionsPostRequestReceiptItemsInner
     */
    'itemPrice': number;
}
/**
 * 
 * @export
 * @interface ApiTransactionsTransactionIdGet200Response
 */
export interface ApiTransactionsTransactionIdGet200Response {
    /**
     * 
     * @type {number}
     * @memberof ApiTransactionsTransactionIdGet200Response
     */
    'initiatorUserId': number;
    /**
     * 
     * @type {string}
     * @memberof ApiTransactionsTransactionIdGet200Response
     */
    'businessName': string;
    /**
     * 
     * @type {Array<ApiTransactionsPostRequestReceiptItemsInner>}
     * @memberof ApiTransactionsTransactionIdGet200Response
     */
    'receiptItems': Array<ApiTransactionsPostRequestReceiptItemsInner>;
}
/**
 * 
 * @export
 * @interface ApiTransactionsUserUserIdGet200ResponseInner
 */
export interface ApiTransactionsUserUserIdGet200ResponseInner {
    /**
     * 
     * @type {number}
     * @memberof ApiTransactionsUserUserIdGet200ResponseInner
     */
    'transactionId': number;
    /**
     * 
     * @type {number}
     * @memberof ApiTransactionsUserUserIdGet200ResponseInner
     */
    'initiatorUserId': number;
    /**
     * 
     * @type {string}
     * @memberof ApiTransactionsUserUserIdGet200ResponseInner
     */
    'businessName': string;
    /**
     * 
     * @type {Array<ApiTransactionsPostRequestReceiptItemsInner>}
     * @memberof ApiTransactionsUserUserIdGet200ResponseInner
     */
    'receiptItems': Array<ApiTransactionsPostRequestReceiptItemsInner>;
}
/**
 * 
 * @export
 * @interface ApiUsersPost201Response
 */
export interface ApiUsersPost201Response {
    /**
     * 
     * @type {number}
     * @memberof ApiUsersPost201Response
     */
    'userId': number;
}
/**
 * 
 * @export
 * @interface ApiUsersPostRequest
 */
export interface ApiUsersPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiUsersPostRequest
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiUsersPostRequest
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiUsersPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ApiUsersPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ApiUsersUserIdGet200Response
 */
export interface ApiUsersUserIdGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiUsersUserIdGet200Response
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiUsersUserIdGet200Response
     */
    'firstName': string;
    /**
     * 
     * @type {number}
     * @memberof ApiUsersUserIdGet200Response
     */
    'userId': number;
    /**
     * 
     * @type {string}
     * @memberof ApiUsersUserIdGet200Response
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface ApiUsersUserIdPutRequest
 */
export interface ApiUsersUserIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiUsersUserIdPutRequest
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiUsersUserIdPutRequest
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiUsersUserIdPutRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface FirstNameEmail
 */
export interface FirstNameEmail {
    /**
     * 
     * @type {string}
     * @memberof FirstNameEmail
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof FirstNameEmail
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface FirstNameLastName
 */
export interface FirstNameLastName {
    /**
     * 
     * @type {string}
     * @memberof FirstNameLastName
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof FirstNameLastName
     */
    'lastName'?: string;
}
/**
 * 
 * @export
 * @interface FirstNameLastNameEmail
 */
export interface FirstNameLastNameEmail {
    /**
     * 
     * @type {string}
     * @memberof FirstNameLastNameEmail
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof FirstNameLastNameEmail
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof FirstNameLastNameEmail
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface LastNameEmail
 */
export interface LastNameEmail {
    /**
     * 
     * @type {string}
     * @memberof LastNameEmail
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof LastNameEmail
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface OnlyEmail
 */
export interface OnlyEmail {
    /**
     * 
     * @type {string}
     * @memberof OnlyEmail
     */
    'lastName'?: string;
}
/**
 * 
 * @export
 * @interface OnlyFirstName
 */
export interface OnlyFirstName {
    /**
     * 
     * @type {string}
     * @memberof OnlyFirstName
     */
    'firstName'?: string;
}
/**
 * 
 * @export
 * @interface OnlyLastName
 */
export interface OnlyLastName {
    /**
     * 
     * @type {string}
     * @memberof OnlyLastName
     */
    'lastName'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary creates new JWT session token for guest initiator user
         * @param {ApiSessionsCreateGuestSessionPostRequest} apiSessionsCreateGuestSessionPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionsCreateGuestSessionPost: async (apiSessionsCreateGuestSessionPostRequest: ApiSessionsCreateGuestSessionPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiSessionsCreateGuestSessionPostRequest' is not null or undefined
            assertParamExists('apiSessionsCreateGuestSessionPost', 'apiSessionsCreateGuestSessionPostRequest', apiSessionsCreateGuestSessionPostRequest)
            const localVarPath = `/api/sessions/createGuestSession`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiSessionsCreateGuestSessionPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary creates new JWT session token for registered initiator user
         * @param {ApiSessionsCreateRegisteredSessionPostRequest} apiSessionsCreateRegisteredSessionPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionsCreateRegisteredSessionPost: async (apiSessionsCreateRegisteredSessionPostRequest: ApiSessionsCreateRegisteredSessionPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiSessionsCreateRegisteredSessionPostRequest' is not null or undefined
            assertParamExists('apiSessionsCreateRegisteredSessionPost', 'apiSessionsCreateRegisteredSessionPostRequest', apiSessionsCreateRegisteredSessionPostRequest)
            const localVarPath = `/api/sessions/createRegisteredSession`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiSessionsCreateRegisteredSessionPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary creates and persists new Transaction
         * @param {ApiTransactionsPostRequest} apiTransactionsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionsPost: async (apiTransactionsPostRequest: ApiTransactionsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiTransactionsPostRequest' is not null or undefined
            assertParamExists('apiTransactionsPost', 'apiTransactionsPostRequest', apiTransactionsPostRequest)
            const localVarPath = `/api/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiTransactionsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary retrieves Transaction by transactionId
         * @param {number} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionsTransactionIdGet: async (transactionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('apiTransactionsTransactionIdGet', 'transactionId', transactionId)
            const localVarPath = `/api/transactions/{transactionId}`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary retrieves all Transactions user participated in
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionsUserUserIdGet: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiTransactionsUserUserIdGet', 'userId', userId)
            const localVarPath = `/api/transactions/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary creates and persists new User
         * @param {ApiUsersPostRequest} apiUsersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPost: async (apiUsersPostRequest: ApiUsersPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiUsersPostRequest' is not null or undefined
            assertParamExists('apiUsersPost', 'apiUsersPostRequest', apiUsersPostRequest)
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUsersPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete User by userId
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersUserIdDelete: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiUsersUserIdDelete', 'userId', userId)
            const localVarPath = `/api/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary retrieves User by userId
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersUserIdGet: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiUsersUserIdGet', 'userId', userId)
            const localVarPath = `/api/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updates User by userId
         * @param {number} userId 
         * @param {ApiUsersUserIdPutRequest} apiUsersUserIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersUserIdPut: async (userId: number, apiUsersUserIdPutRequest: ApiUsersUserIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiUsersUserIdPut', 'userId', userId)
            // verify required parameter 'apiUsersUserIdPutRequest' is not null or undefined
            assertParamExists('apiUsersUserIdPut', 'apiUsersUserIdPutRequest', apiUsersUserIdPutRequest)
            const localVarPath = `/api/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUsersUserIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary creates new JWT session token for guest initiator user
         * @param {ApiSessionsCreateGuestSessionPostRequest} apiSessionsCreateGuestSessionPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSessionsCreateGuestSessionPost(apiSessionsCreateGuestSessionPostRequest: ApiSessionsCreateGuestSessionPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSessionsCreateGuestSessionPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSessionsCreateGuestSessionPost(apiSessionsCreateGuestSessionPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiSessionsCreateGuestSessionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary creates new JWT session token for registered initiator user
         * @param {ApiSessionsCreateRegisteredSessionPostRequest} apiSessionsCreateRegisteredSessionPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSessionsCreateRegisteredSessionPost(apiSessionsCreateRegisteredSessionPostRequest: ApiSessionsCreateRegisteredSessionPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSessionsCreateGuestSessionPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSessionsCreateRegisteredSessionPost(apiSessionsCreateRegisteredSessionPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiSessionsCreateRegisteredSessionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary creates and persists new Transaction
         * @param {ApiTransactionsPostRequest} apiTransactionsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionsPost(apiTransactionsPostRequest: ApiTransactionsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiTransactionsPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTransactionsPost(apiTransactionsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiTransactionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary retrieves Transaction by transactionId
         * @param {number} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionsTransactionIdGet(transactionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiTransactionsTransactionIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTransactionsTransactionIdGet(transactionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiTransactionsTransactionIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary retrieves all Transactions user participated in
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionsUserUserIdGet(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiTransactionsUserUserIdGet200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTransactionsUserUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiTransactionsUserUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary creates and persists new User
         * @param {ApiUsersPostRequest} apiUsersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersPost(apiUsersPostRequest: ApiUsersPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUsersPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersPost(apiUsersPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary delete User by userId
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersUserIdDelete(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersUserIdDelete(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiUsersUserIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary retrieves User by userId
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersUserIdGet(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUsersUserIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiUsersUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary updates User by userId
         * @param {number} userId 
         * @param {ApiUsersUserIdPutRequest} apiUsersUserIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersUserIdPut(userId: number, apiUsersUserIdPutRequest: ApiUsersUserIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUsersUserIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersUserIdPut(userId, apiUsersUserIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiUsersUserIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary creates new JWT session token for guest initiator user
         * @param {ApiSessionsCreateGuestSessionPostRequest} apiSessionsCreateGuestSessionPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionsCreateGuestSessionPost(apiSessionsCreateGuestSessionPostRequest: ApiSessionsCreateGuestSessionPostRequest, options?: any): AxiosPromise<ApiSessionsCreateGuestSessionPost200Response> {
            return localVarFp.apiSessionsCreateGuestSessionPost(apiSessionsCreateGuestSessionPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary creates new JWT session token for registered initiator user
         * @param {ApiSessionsCreateRegisteredSessionPostRequest} apiSessionsCreateRegisteredSessionPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionsCreateRegisteredSessionPost(apiSessionsCreateRegisteredSessionPostRequest: ApiSessionsCreateRegisteredSessionPostRequest, options?: any): AxiosPromise<ApiSessionsCreateGuestSessionPost200Response> {
            return localVarFp.apiSessionsCreateRegisteredSessionPost(apiSessionsCreateRegisteredSessionPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary creates and persists new Transaction
         * @param {ApiTransactionsPostRequest} apiTransactionsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionsPost(apiTransactionsPostRequest: ApiTransactionsPostRequest, options?: any): AxiosPromise<ApiTransactionsPost201Response> {
            return localVarFp.apiTransactionsPost(apiTransactionsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary retrieves Transaction by transactionId
         * @param {number} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionsTransactionIdGet(transactionId: number, options?: any): AxiosPromise<ApiTransactionsTransactionIdGet200Response> {
            return localVarFp.apiTransactionsTransactionIdGet(transactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary retrieves all Transactions user participated in
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionsUserUserIdGet(userId: number, options?: any): AxiosPromise<Array<ApiTransactionsUserUserIdGet200ResponseInner>> {
            return localVarFp.apiTransactionsUserUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary creates and persists new User
         * @param {ApiUsersPostRequest} apiUsersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPost(apiUsersPostRequest: ApiUsersPostRequest, options?: any): AxiosPromise<ApiUsersPost201Response> {
            return localVarFp.apiUsersPost(apiUsersPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete User by userId
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersUserIdDelete(userId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiUsersUserIdDelete(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary retrieves User by userId
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersUserIdGet(userId: number, options?: any): AxiosPromise<ApiUsersUserIdGet200Response> {
            return localVarFp.apiUsersUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updates User by userId
         * @param {number} userId 
         * @param {ApiUsersUserIdPutRequest} apiUsersUserIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersUserIdPut(userId: number, apiUsersUserIdPutRequest: ApiUsersUserIdPutRequest, options?: any): AxiosPromise<ApiUsersUserIdGet200Response> {
            return localVarFp.apiUsersUserIdPut(userId, apiUsersUserIdPutRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary creates new JWT session token for guest initiator user
     * @param {ApiSessionsCreateGuestSessionPostRequest} apiSessionsCreateGuestSessionPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiSessionsCreateGuestSessionPost(apiSessionsCreateGuestSessionPostRequest: ApiSessionsCreateGuestSessionPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiSessionsCreateGuestSessionPost(apiSessionsCreateGuestSessionPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary creates new JWT session token for registered initiator user
     * @param {ApiSessionsCreateRegisteredSessionPostRequest} apiSessionsCreateRegisteredSessionPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiSessionsCreateRegisteredSessionPost(apiSessionsCreateRegisteredSessionPostRequest: ApiSessionsCreateRegisteredSessionPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiSessionsCreateRegisteredSessionPost(apiSessionsCreateRegisteredSessionPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary creates and persists new Transaction
     * @param {ApiTransactionsPostRequest} apiTransactionsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiTransactionsPost(apiTransactionsPostRequest: ApiTransactionsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiTransactionsPost(apiTransactionsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary retrieves Transaction by transactionId
     * @param {number} transactionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiTransactionsTransactionIdGet(transactionId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiTransactionsTransactionIdGet(transactionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary retrieves all Transactions user participated in
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiTransactionsUserUserIdGet(userId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiTransactionsUserUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary creates and persists new User
     * @param {ApiUsersPostRequest} apiUsersPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiUsersPost(apiUsersPostRequest: ApiUsersPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiUsersPost(apiUsersPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete User by userId
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiUsersUserIdDelete(userId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiUsersUserIdDelete(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary retrieves User by userId
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiUsersUserIdGet(userId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiUsersUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updates User by userId
     * @param {number} userId 
     * @param {ApiUsersUserIdPutRequest} apiUsersUserIdPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiUsersUserIdPut(userId: number, apiUsersUserIdPutRequest: ApiUsersUserIdPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiUsersUserIdPut(userId, apiUsersUserIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



